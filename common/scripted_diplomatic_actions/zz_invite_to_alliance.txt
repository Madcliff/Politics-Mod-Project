
scripted_diplomatic_actions = {
	invite_to_alliance = { # will be used in most localizations

		# root is the initiator of action and this is the target country
		allowed = { #if action is valid
			#always = yes
			root = {
				TAG = ENG 
			}
		}
		visible = { #if action is visible on gui
			is_in_faction = no
		}
		selectable = { #if action is selectable on gui
			always = yes
		}
		
		requires_acceptance = yes # if true the action will require acceptance of target country
		cost = 100 # pp cost, can be zero
		#command_power = 10 # cp cost, can be zero
		#
		#cost_string = loc_key # if you have a custom cost, use this loc to display it
		show_acceptance_on_action_button = yes # set to no if acceptance shouldn't be displayed on the action button
		#
		icon = 1 # icon frame to use in notification
		#
		#       #for effects/triggers/variables, root is the sender and this is receiver
		#
		# runs when the action is sent
		on_sent_effect = {

		}
		#
		# runs when the action is properly sent and accepted
		complete_effect = {
			ROOT = { add_to_faction = PREV }
		}
		#
		# runs when the action is properly sent and rejected
		reject_effect = {
		}
		#
		# SEND POPUP CUSTOMIZATION
		# use diplomatic_action as context in scripted gui
		# send_scripted_gui = send_scripted_gui_name # if specified, the diplomatic action will use this scripted gui before sending the request. the player (or ai) can make changes on that gui and store stuff as variable to customize action
		reset_send_effect = { # if action has a send scripted gui, this effect will be used for clearing the state of gui (will run when player opens the scripted gui by sending the action or when ai proposes action
			# clear action
			if = {
				limit = { 
					root = {
						is_ai = yes
					}
				}
				# initialize for ai
			}
		}
		can_be_sent = { # send button will be disabled if no
			always = yes
		}
		#send_description = loc_key_send # if there is no scripted gui, this desc will be used in send yes/no pop up

		# RECEIVE POPUP CUSTOMIZATION
		# use diplomatic_action as context in scripted gui
		# receive_scripted_gui = receive_scripted_gui_name #if specified the receiver of the action will get this scripted gui instead of yes-no popup when they receive the propose
		reset_receive_effect = {
			# clear action
			if = {
				limit = { 
					is_ai = yes
				}
				# change stuff for ai
			}
		}
		can_be_accepted = { # accept button will be disabled if no
			always = yes
		}
		#receive_description = loc_key_receive # if there is no scripted gui, this desc will be used in send yes/no pop up
		
		# PLAYER FEEDBACK ON ACCEPT/REJECT
		#accept_title = loc_key_accept #can be overridden to customize accepted/rejected pop ups for the sender
		#accept_description = loc_key_accept_desc
		#reject_title = loc_key_reject
		#reject_description = loc_key_reject_desc
		
		
		# AI
		# a list of ai_will_do entries that will be used to decide if AI should accept or reject a request
		ai_acceptance = {
			condition = { # name is used for loc
				base = 100
			}
		}
		# ai_will_do to decide if AI should send this action or not
		ai_desire = {
			base = -100
		}
	}
	invite_to_puppet = { # will be used in most localizations

		# root is the initiator of action and this is the target country
		allowed = { #if action is valid
			#always = yes
			root = {
				TAG = ENG 
			}
		}
		visible = { #if action is visible on gui
			is_in_faction = yes
			is_ally_with = root 
			NOT = { 
				is_subject_of = root 
			}
		}
		selectable = { #if action is selectable on gui
			always = yes
		}
		
		requires_acceptance = yes # if true the action will require acceptance of target country
		cost = 100 # pp cost, can be zero
		#command_power = 10 # cp cost, can be zero
		#
		#cost_string = loc_key # if you have a custom cost, use this loc to display it
		show_acceptance_on_action_button = yes # set to no if acceptance shouldn't be displayed on the action button
		#
		icon = 1 # icon frame to use in notification
		#
		#       #for effects/triggers/variables, root is the sender and this is receiver
		#
		# runs when the action is sent
		on_sent_effect = {

		}
		#
		# runs when the action is properly sent and accepted
		complete_effect = {
			every_subject_country = { 
				ROOT = { 
					puppet = {
						target = PREV
						end_wars = no
					} 
				}
			}
			ROOT = { 
				puppet = {
					target = PREV
					end_wars = no
				} 
			}
		}
		#
		# runs when the action is properly sent and rejected
		reject_effect = {
		}
		#
		# SEND POPUP CUSTOMIZATION
		# use diplomatic_action as context in scripted gui
		# send_scripted_gui = send_scripted_gui_name # if specified, the diplomatic action will use this scripted gui before sending the request. the player (or ai) can make changes on that gui and store stuff as variable to customize action
		reset_send_effect = { # if action has a send scripted gui, this effect will be used for clearing the state of gui (will run when player opens the scripted gui by sending the action or when ai proposes action
			# clear action
			if = {
				limit = { 
					root = {
						is_ai = yes
					}
				}
				# initialize for ai
			}
		}
		can_be_sent = { # send button will be disabled if no
			always = yes
		}
		#send_description = loc_key_send # if there is no scripted gui, this desc will be used in send yes/no pop up

		# RECEIVE POPUP CUSTOMIZATION
		# use diplomatic_action as context in scripted gui
		# receive_scripted_gui = receive_scripted_gui_name #if specified the receiver of the action will get this scripted gui instead of yes-no popup when they receive the propose
		reset_receive_effect = {
			# clear action
			if = {
				limit = { 
					is_ai = yes
				}
				# change stuff for ai
			}
		}
		can_be_accepted = { # accept button will be disabled if no
			always = yes
		}
		#receive_description = loc_key_receive # if there is no scripted gui, this desc will be used in send yes/no pop up
		
		# PLAYER FEEDBACK ON ACCEPT/REJECT
		#accept_title = loc_key_accept #can be overridden to customize accepted/rejected pop ups for the sender
		#accept_description = loc_key_accept_desc
		#reject_title = loc_key_reject
		#reject_description = loc_key_reject_desc
		
		
		# AI
		# a list of ai_will_do entries that will be used to decide if AI should accept or reject a request
		ai_acceptance = {
			condition = { # name is used for loc
				base = 1
				modifier = {
					add = 1000 
					ROOT = { 
						fighting_army_strength_ratio = {
							tag = PREV
							ratio > 0.7 
						}
					}
				}
			}
		}
		# ai_will_do to decide if AI should send this action or not
		ai_desire = {
			base = -100
		}
	}

	improve_manpower = {
		 # will be used in most localizations

		# root is the initiator of action and this is the target country
		allowed = { #if action is valid
			#always = yes
			root = {
				TAG = ENG 
			}
		}
		visible = { #if action is visible on gui
		OR = {
			THIS = ROOT 
			is_subject_of = root 
		}
			
		}
		selectable = { #if action is selectable on gui

		}
		
		requires_acceptance = yes # if true the action will require acceptance of target country
		cost = 100 # pp cost, can be zero
		#command_power = 10 # cp cost, can be zero
		#
		#cost_string = loc_key # if you have a custom cost, use this loc to display it
		show_acceptance_on_action_button = yes # set to no if acceptance shouldn't be displayed on the action button
		#
		icon = 1 # icon frame to use in notification
		#
		#       #for effects/triggers/variables, root is the sender and this is receiver
		#
		# runs when the action is sent
		on_sent_effect = {

		}
		#
		# runs when the action is properly sent and accepted
		complete_effect = {
			if = { 
				limit = {
					root.interaction = 1
				}
				add_timed_idea = { idea = imperial_manpower days = 360 }
			}
			if = { 
				limit = {
					root.interaction = 2
				}
				add_opinion_modifier = { target = ROOT modifier = zz_improve_relation }
			}
			if = { 
				limit = {
					root.interaction = 3
				}
				add_to_variable = { var_zz_recruitment = 0.01 } 
			}
			if = { 
				limit = {
					root.interaction = 4
				}
				add_autonomy_score = {
					value = -150
					localization = "Support Empire"
				}
			}
			
		}
		#
		# runs when the action is properly sent and rejected
		reject_effect = {
		}
		#
		# SEND POPUP CUSTOMIZATION
		# use diplomatic_action as context in scripted gui
		send_scripted_gui = imperial_subject_interactions_panel # if specified, the diplomatic action will use this scripted gui before sending the request. the player (or ai) can make changes on that gui and store stuff as variable to customize action
		reset_send_effect = { # if action has a send scripted gui, this effect will be used for clearing the state of gui (will run when player opens the scripted gui by sending the action or when ai proposes action
			# clear action
			if = {
				limit = { 
					root = {
						is_ai = yes
					}
				}
				# initialize for ai
			}
		}
		can_be_sent = { # send button will be disabled if no
			always = yes
		}
		#send_description = loc_key_send # if there is no scripted gui, this desc will be used in send yes/no pop up

		# RECEIVE POPUP CUSTOMIZATION
		# use diplomatic_action as context in scripted gui
		# receive_scripted_gui = receive_scripted_gui_name #if specified the receiver of the action will get this scripted gui instead of yes-no popup when they receive the propose
		reset_receive_effect = {
			# clear action
			if = {
				limit = { 
					is_ai = yes
				}
				# change stuff for ai
			}
		}
		can_be_accepted = { # accept button will be disabled if no
			always = yes
		}
		#receive_description = loc_key_receive # if there is no scripted gui, this desc will be used in send yes/no pop up
		
		# PLAYER FEEDBACK ON ACCEPT/REJECT
		#accept_title = loc_key_accept #can be overridden to customize accepted/rejected pop ups for the sender
		#accept_description = loc_key_accept_desc
		#reject_title = loc_key_reject
		#reject_description = loc_key_reject_desc
		
		
		# AI
		# a list of ai_will_do entries that will be used to decide if AI should accept or reject a request
		ai_acceptance = {
			condition = { # name is used for loc
				base = 1
				modifier = {
					add = 1000 
					ROOT = { 
						fighting_army_strength_ratio = {
							tag = PREV
							ratio > 0.7 
						}
					}
				}
			}
		}
		# ai_will_do to decide if AI should send this action or not
		ai_desire = {
			base = -100
		}
	}
}
	